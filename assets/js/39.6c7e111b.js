(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{475:function(t,n,a){"use strict";a.r(n);var s=a(2),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"执行上下文栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),n("p",[t._v("在了解执行上下文栈之前，我们先要了解一下 JS 代码的作用于是如何的。")]),t._v(" "),n("h2",{attrs:{id:"静态作用域与动态作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态作用域与动态作用域"}},[t._v("#")]),t._v(" 静态作用域与动态作用域")]),t._v(" "),n("p",[t._v("JS 因为采用 "),n("strong",[t._v("词法作用域")]),t._v("，函数的作用域在函数定义的时候就决定了。Js 代码在执行之初就已经决定好了它的作用域了。所以是 "),n("strong",[t._v("词法作用域 / 静态作用域")]),t._v("。\n与词法作用域相对的是 "),n("strong",[t._v("动态作用域")]),t._v("，函数的作用域在函数调用的时候才决定。如果说是执行时再决定作用域的话，则是动态作用域。\n案例如下")]),t._v(" "),n("div",{staticClass:"language-JS extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),n("h2",{attrs:{id:"可执行代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可执行代码"}},[t._v("#")]),t._v(" 可执行代码")]),t._v(" "),n("p",[t._v("JS 中的可执行代码一共就只有这三类")]),t._v(" "),n("ol",[n("li",[t._v("全局代码")]),t._v(" "),n("li",[t._v("函数代码")]),t._v(" "),n("li",[t._v("eval 代码")])]),t._v(" "),n("h2",{attrs:{id:"执行上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),n("p",[t._v('当 JS 代码执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做"执行上下文(execution contexts)"。')]),t._v(" "),n("h2",{attrs:{id:"执行上下文栈-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈-2"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),n("p",[t._v("接下来问题来了，我们写的函数多了去了，如何管理创建的那么多执行上下文呢？\n为了解决这个问题 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文")]),t._v(" "),n("p",[t._v("为了模拟执行上下文栈的行为，让我们定义执行上下文栈是下面数组的样子：")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("ECStack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 "),n("code",[t._v("globalContext")]),t._v(" 表示它，并且只有当整个应用程序结束的时候，"),n("code",[t._v("ECStack")]),t._v(" 才会被清空，所以 "),n("code",[t._v("ECStack")]),t._v(" 最底部永远有个 "),n("code",[t._v("globalContext")])]),t._v(" "),n("div",{staticClass:"language-JS extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("ECStack "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  globalContext\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("现在假设 JavaScript 遇到下面的这段代码了：")]),t._v(" "),n("div",{staticClass:"language-JS extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fun3'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。知道了这样的工作原理，让我们来看看如何处理上面这段代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 伪代码\n\n// fun1()\nECStack.unshift(<fun1> functionContext);\n\nECStack = [\n  <fun1> functionContext,\n  globalContext\n]\n\n// fun1中竟然调用了fun2，还要创建fun2的执行上下文\nECStack.unshift(<fun2> functionContext);\n\nECStack = [\n  <fun2> functionContext,\n  <fun1> functionContext,\n  globalContext\n]\n\n// 擦，fun2还调用了fun3！\nECStack.unshift(<fun3> functionContext);\n\nECStack = [\n  <fun3> functionContext,\n  <fun2> functionContext,\n  <fun1> functionContext,\n  globalContext\n];\n\n// fun3执行完毕\nECStack.shift();\n\nECStack = [\n  <fun2> functionContext,\n  <fun1> functionContext,\n  globalContext\n]\n\n// fun2执行完毕\nECStack.shift();\n\nECStack = [\n  <fun1> functionContext,\n  globalContext\n]\n\n// fun1执行完毕\nECStack.shift();\n\nECStack = [\n  globalContext\n];\n\n// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext\n\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);